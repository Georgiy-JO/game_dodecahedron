#ifndef GAMEWINDOW_H
#define GAMEWINDOW_H

#include <QGraphicsView>
#include <QKeyEvent>
#include <QListWidgetItem>
#include <QMainWindow>
#include <QStackedWidget>
#include <QTimer>
#include <QToolTip>

/**
 * @brief Header the the gridscene_ class (handles game scenes).
 */
#include "gridscene_/gridscene_.h"

/**
 * @brief Include different game headers depending on compilation define flag.
 */
#ifdef TE_TRIS
#include "../../brick_game/tetris/tetris.h"
#endif
#ifdef S_SNAKE
#include "../../brick_game/snake/s-snake.h"
#endif

QT_BEGIN_NAMESPACE
namespace Ui {
/**
 * @brief Forward declaration of the Ui::GameWindow class, generated by Qt
 * Designer.
 */
class GameWindow;
}  // namespace Ui
QT_END_NAMESPACE

/**
 * @brief Main application window for managing the GUI.
 */
class GameWindow : public QMainWindow {
  Q_OBJECT

 private:
  /**
   * @brief Number of currently active games (games that are selectable in UI at
   * ones).
   * @note This will be changed in future GitHub releases, when several games
   * will be usable at ones.
   */
  static constexpr int ACT_GAMES_AMO = 1;
  /**
   * @brief Total number of game slots available in the interface.
   * @note That is the number of games that are planned to be included later.
   */
  static constexpr int GAMES_AMO = 5;
  /**
   * @brief Filepath for Tetris control info used in UI tooltips.
   */
  static constexpr const char *TTT_ctrl_file = "data/te-tris_ctrl.txt";
  /**
   * @brief Filepath for Snake control info used in UI tooltips.
   */
  static constexpr const char *TSS_ctrl_file = "data/s-stake_ctrl.txt";
  /**
   * @brief Message displayed when no control info is available.
   */
  static constexpr const char *NOINFO = "NoInfo";

 public:
  /**
   * @brief Constructs the main GameWindow GUI.
   * @param parent Pointer to parent widget, defaults to nullptr.
   */
  GameWindow(QWidget *parent = nullptr);
  /**
   * @brief Destructor that cleans up UI resources.
   */
  ~GameWindow();

 private slots:
  /**
   * @brief Slot triggered when a game in the game list is double-clicked.
   * @param item Pointer to the clicked QListWidgetItem.
   */
  void on_gamesList_itemDoubleClicked(QListWidgetItem *item);
  /**
   * @brief Slot triggered when the stacked widget index (workspace) changes.
   * @note In simple words it is triggered when the workspace (UI layout) is
   * changed.
   * @param arg1 Index of the newly selected workspace.
   */
  void on_workSpaces_currentChanged(int arg1);
  /**
   * @brief Slot triggered when the "to selection" button is pressed.
   * @note Button is used to return to the game list.
   */
  void on_toSelectionButton_pressed();
  /**
   * @brief Slot triggered when the "start" button is pressed.
   */
  void on_startButton_pressed();

 private:
  /**
   * @brief Index of the currently active game (from 0 to GAMES_AMO-1).
   */
  int active_game = -1;
  /**
   * @brief Pointer to the active control note file.
   */
  const char *note_file = nullptr;
  /**
   * @brief UI form object generated by Qt Designer.
   */
  Ui::GameWindow *ui;
  /**
   * @brief Timer for managing game updates and refresh rate.
   */
  QTimer *timer;
  /**
   * @brief Main game display scene.
   */
  GridScene_ main_scene;
  /**
   * @brief Optional second scene for secondary display.
   */
  GridScene_ second_scene;

  /**
   * @brief Deactivates a given game list item (e.g., greying it out etc).
   * @param item Pointer to the QListWidgetItem to deactivate.
   */
  void deactivateItem(QListWidgetItem *item);
  /**
   * @brief Checks if a game item belongs to the first game.
   * @name First game group has controles list. This will be changed in the
   * future versions.
   * @param item Pointer to the selected QListWidgetItem to check.
   * @return true if item is from the first group, false otherwise.
   */
  bool isFromFirstGroup(const QListWidgetItem *item) const;

  /**
   * @brief Initializes everything in the first workspace if it is selected.
   */
  void firstWorkSpaceInitial();
  /**
   * @brief Initializes everything in the second workspace if it is selected.
   */
  void secondWorkSpaceInitial();
  /**
   * @brief Initializes everything in the third workspace if it is selected.
   */
  void thirdWorkSpaceInitial();

  /**
   * @brief Displays a brief text message to the user.
   * @note Debug and error chatching function.
   * @param str Message to be displayed.
   */
  void textIndication(const QString str);
  /**
   * @brief Sets the application window name based on current state of UI or the
   * chosen game.
   */
  void winNameSetter();
  /**
   * @brief Sets the appropriate note file for the selected game.
   */
  void setNoteFile();

  /**
   * @brief Prepares the QGraphicsView(s) and other game data for displaying the
   * game.
   */
  void getViewReady();
  /**
   * @brief Updates and displays the current state of the game (field, etc).
   */
  void displayGameState();
  /**
   * @brief Updates scene based on game data.
   * @note Is a child function of displayGameState().
   * @param scene Scene to update.
   * @param height Height of the game field.
   * @param width Width of the game field.
   * @param field 2D game field array.
   */
  void displayScene(GridScene_ &scene, const int height, const int width,
                    const int **field);

  /**
   * @brief Processes a key press at workspace 2.
   * @param keyEvent The QKeyEvent triggered by user input.
   */
  void secondWorkSpaceKeyPress(QKeyEvent *keyEvent);
  /**
   * @brief Processes a key press at workspace 3.
   * @param keyEvent The QKeyEvent triggered by user input.
   */
  void thirdWorkSpaceKeyPress(QKeyEvent *keyEvent);

  /**
   * @brief Displays a game over screen and optionally shows victory state.
   * @param victory true if the player won, false otherwise.
   */
  void gameOverScreen(bool victory = 0);
  /**
   * @brief Ends the current game and cleans data (when the user wants to exit).
   */
  void endGame();

 protected:
  /**
   * @brief Custom Qt event filter for handling special key or UI events (for
   * now only handles keyboard presses).
   * @param obj The QObject that received the event.
   * @param event The event being filtered.
   * @return true if the event was handled, false otherwise.
   */
  bool eventFilter(QObject *obj, QEvent *event) override;
};

#endif  // GAMEWINDOW_H
